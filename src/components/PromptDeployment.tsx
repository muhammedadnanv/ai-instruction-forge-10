
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { FileCode, Copy, Code, Terminal, Server, DownloadCloud, Share2, ExternalLink, Globe, Clipboard } from "lucide-react";

const PromptDeployment = () => {
  const [prompt, setPrompt] = useState(`
# System Instruction
You are a helpful assistant that provides concise, accurate information.

# User Prompt
{{input}}

# Format
Respond with clear, structured information using markdown formatting.
`);
  
  const [name, setName] = useState("My Prompt Script");
  const [deploymentType, setDeploymentType] = useState("js");
  const [apiMode, setApiMode] = useState("openai");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedCode, setGeneratedCode] = useState("");
  const [deployedUrl, setDeployedUrl] = useState("");
  
  const { toast } = useToast();
  
  const generateCode = () => {
    setIsGenerating(true);
    
    setTimeout(() => {
      let code = "";
      
      if (deploymentType === "js") {
        code = generateJavaScriptCode();
      } else if (deploymentType === "py") {
        code = generatePythonCode();
      } else if (deploymentType === "api") {
        code = generateApiCode();
      }
      
      setGeneratedCode(code);
      setIsGenerating(false);
      
      toast({
        title: "Code Generated",
        description: `${deploymentType === "api" ? "API" : "Script"} code has been generated successfully`
      });
    }, 1000);
  };
  
  const generateJavaScriptCode = () => {
    return `// ${name}
// Generated by InstructAI

/**
 * A prompt function that can be used in applications
 * @param {string} input - The user input to process
 * @param {object} options - Configuration options
 * @returns {Promise<string>} - The AI response
 */
async function runPrompt(input, options = {}) {
  const apiKey = options.apiKey || process.env.OPENAI_API_KEY;
  const model = options.model || "gpt-4o";
  
  if (!apiKey) {
    throw new Error("API key is required");
  }

  const systemPrompt = \`${prompt.replace(/`/g, "\\`").replace(/\n/g, "\\n")}\`;
  
  const processedPrompt = systemPrompt.replace("{{input}}", input);
  
  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": \`Bearer \${apiKey}\`,
      },
      body: JSON.stringify({
        model,
        messages: [
          { role: "system", content: processedPrompt }
        ],
        temperature: 0.7,
      }),
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error?.message || "Failed to generate response");
    }
    
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
}

// Example usage
// const response = await runPrompt("Tell me about prompt engineering");
// console.log(response);

module.exports = { runPrompt };
`;
  };
  
  const generatePythonCode = () => {
    return `# ${name}
# Generated by InstructAI

import os
import requests
import json
from typing import Dict, Any, Optional

class PromptScript:
    """A class for running the prompt against OpenAI API"""
    
    def __init__(self, api_key: Optional[str] = None):
        """Initialize with optional API key, otherwise use environment variable"""
        self.api_key = api_key or os.environ.get("OPENAI_API_KEY")
        
        if not self.api_key:
            raise ValueError("API key is required. Set OPENAI_API_KEY environment variable or pass as parameter.")
            
        self.system_prompt = """${prompt.replace(/"/g, '\\"').replace(/\n/g, "\\n")}"""
    
    def run_prompt(self, input_text: str, model: str = "gpt-4o", temperature: float = 0.7) -> str:
        """Run the prompt with the provided input"""
        processed_prompt = self.system_prompt.replace("{{input}}", input_text)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": processed_prompt}
            ],
            "temperature": temperature
        }
        
        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=payload
            )
            response.raise_for_status()
            
            data = response.json()
            return data["choices"][0]["message"]["content"]
        except Exception as e:
            print(f"Error: {e}")
            raise

# Example usage:
# if __name__ == "__main__":
#     prompt_runner = PromptScript()
#     result = prompt_runner.run_prompt("Tell me about prompt engineering")
#     print(result)
`;
  };
  
  const generateApiCode = () => {
    if (apiMode === "openai") {
      return `// ${name} API - OpenAI Compatible API
// Generated by InstructAI

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const API_KEY = process.env.OPENAI_API_KEY;

if (!API_KEY) {
  console.error("Missing OPENAI_API_KEY in environment variables");
  process.exit(1);
}

// The prompt template
const PROMPT_TEMPLATE = \`${prompt.replace(/`/g, "\\`").replace(/\n/g, "\\n")}\`;

app.post('/api/generate', async (req, res) => {
  try {
    const { input, options = {} } = req.body;
    
    if (!input) {
      return res.status(400).json({ error: "Input is required" });
    }
    
    const processedPrompt = PROMPT_TEMPLATE.replace("{{input}}", input);
    
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": \`Bearer \${API_KEY}\`,
      },
      body: JSON.stringify({
        model: options.model || "gpt-4o",
        messages: [
          { role: "system", content: processedPrompt }
        ],
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 1000,
      }),
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      return res.status(response.status).json({ 
        error: data.error?.message || "Failed to generate response" 
      });
    }
    
    return res.json({ 
      result: data.choices[0].message.content,
      usage: data.usage
    });
  } catch (error) {
    console.error("Error:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
});

// Health check endpoint
app.get('/api/health', (_, res) => {
  res.json({ status: "ok", name: "${name}" });
});

app.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});

/*
DEPLOYMENT INSTRUCTIONS:
1. Save this file as app.js
2. Run: npm init -y
3. Run: npm install express cors dotenv
4. Create a .env file with OPENAI_API_KEY=your_key_here
5. Start with: node app.js
*/
`;
    } else {
      // Generate for web endpoint
      return `// ${name} Web API - Vercel Serverless Function
// Generated by InstructAI

// Save this file as /api/generate.js in a Vercel project

import { Configuration, OpenAIApi } from "openai";

// Initialize OpenAI configuration
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

// The prompt template
const PROMPT_TEMPLATE = \`${prompt.replace(/`/g, "\\`").replace(/\n/g, "\\n")}\`;

export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization');
  
  // Handle OPTIONS request (preflight)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  // Only allow POST for /api/generate
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { input, options = {} } = req.body;
    
    if (!input) {
      return res.status(400).json({ error: "Input is required" });
    }
    
    if (!configuration.apiKey) {
      return res.status(500).json({
        error: "OpenAI API key not configured"
      });
    }
    
    const processedPrompt = PROMPT_TEMPLATE.replace("{{input}}", input);
    
    const completion = await openai.createChatCompletion({
      model: options.model || "gpt-4o",
      messages: [{ role: "system", content: processedPrompt }],
      temperature: options.temperature || 0.7,
      max_tokens: options.maxTokens || 1000,
    });
    
    return res.status(200).json({ 
      result: completion.data.choices[0].message.content,
      usage: completion.data.usage
    });
  } catch (error) {
    console.error("Error:", error);
    
    if (error.response) {
      return res.status(error.response.status).json({
        error: error.response.data
      });
    } else {
      return res.status(500).json({
        error: "An error occurred during your request."
      });
    }
  }
}

/*
DEPLOYMENT INSTRUCTIONS:
1. Create a new project directory
2. Install Vercel CLI: npm install -g vercel
3. Run: npm init -y
4. Run: npm install openai
5. Create an /api directory and save this file as generate.js
6. Create a vercel.json with:
   {
     "version": 2,
     "builds": [{ "src": "api/**/*.js", "use": "@vercel/node" }],
     "routes": [{ "src": "/api/(.*)", "dest": "/api/$1" }]
   }
7. Run: vercel --env OPENAI_API_KEY=your_key_here
*/
`;
    }
  };
  
  const deployPrompt = () => {
    // Simulate deployment
    setIsGenerating(true);
    
    setTimeout(() => {
      setDeployedUrl(`https://prompt-${Math.random().toString(36).substring(2, 7)}.instructai.dev`);
      setIsGenerating(false);
      
      toast({
        title: "Prompt Deployed",
        description: "Your prompt has been deployed successfully"
      });
    }, 2000);
  };
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "The code has been copied to your clipboard"
    });
  };
  
  // Generate code templates based on deployment type
  const getCodeBlock = () => {
    if (!generatedCode) return null;
    
    return (
      <div className="relative">
        <Button 
          variant="outline" 
          size="sm" 
          className="absolute top-2 right-2 h-8 w-8 p-0"
          onClick={() => copyToClipboard(generatedCode)}
        >
          <Copy className="h-4 w-4" />
        </Button>
        <ScrollArea className="h-[500px] w-full rounded-md bg-muted">
          <pre className="p-4 font-mono text-sm">{generatedCode}</pre>
        </ScrollArea>
      </div>
    );
  };
  
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 mb-4">
        <Card>
          <CardContent className="p-4">
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Prompt Name</label>
                <Input 
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Enter a name for your prompt"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Prompt Template</label>
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Enter your prompt template..."
                  className="min-h-[200px] font-mono"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Use {{input}} as a placeholder for user input
                </p>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Deployment Type</label>
                  <Select value={deploymentType} onValueChange={setDeploymentType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="js">JavaScript Script</SelectItem>
                      <SelectItem value="py">Python Script</SelectItem>
                      <SelectItem value="api">API Endpoint</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {deploymentType === "api" && (
                  <div>
                    <label className="block text-sm font-medium mb-1">API Framework</label>
                    <Select value={apiMode} onValueChange={setApiMode}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select framework" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="openai">Express.js API</SelectItem>
                        <SelectItem value="vercel">Vercel Serverless</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}
              </div>
              
              <div className="flex gap-2 justify-end">
                <Button 
                  variant="default" 
                  className="gap-1"
                  onClick={generateCode}
                  disabled={isGenerating}
                >
                  <FileCode className="h-4 w-4" />
                  Generate {deploymentType === "api" ? "API" : "Script"}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <Tabs defaultValue="code">
              <TabsList className="mb-4">
                <TabsTrigger value="code" className="flex gap-1 items-center">
                  <Code className="h-4 w-4" />
                  Code
                </TabsTrigger>
                <TabsTrigger value="deploy" className="flex gap-1 items-center">
                  <Server className="h-4 w-4" />
                  Deploy
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="code">
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <h3 className="font-medium">Generated {deploymentType === "api" ? "API" : "Script"} Code</h3>
                  </div>
                  
                  {generatedCode ? getCodeBlock() : (
                    <div className="bg-muted p-8 text-center rounded-md">
                      <Code className="h-10 w-10 mx-auto text-gray-400 mb-2" />
                      <h3 className="font-medium">No Code Generated Yet</h3>
                      <p className="text-gray-500 text-sm mt-1 max-w-xs mx-auto">
                        Configure your prompt and click "Generate {deploymentType === "api" ? "API" : "Script"}" 
                        to create deployable code
                      </p>
                    </div>
                  )}
                </div>
              </TabsContent>
              
              <TabsContent value="deploy">
                <div className="space-y-4">
                  {generatedCode ? (
                    <>
                      <div className="bg-muted/30 p-4 rounded-md border">
                        <h3 className="font-medium mb-2">Deployment Options</h3>
                        <div className="space-y-3">
                          {deploymentType === "js" && (
                            <>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Terminal className="h-5 w-5 text-gray-500" />
                                  <div>
                                    <div className="font-medium">NPM Package</div>
                                    <div className="text-xs text-gray-500">Publish as an NPM package</div>
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">Deploy</Button>
                              </div>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Share2 className="h-5 w-5 text-gray-500" />
                                  <div>
                                    <div className="font-medium">Serverless Function</div>
                                    <div className="text-xs text-gray-500">Deploy as AWS Lambda</div>
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">Deploy</Button>
                              </div>
                            </>
                          )}
                          
                          {deploymentType === "py" && (
                            <>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Terminal className="h-5 w-5 text-gray-500" />
                                  <div>
                                    <div className="font-medium">PyPI Package</div>
                                    <div className="text-xs text-gray-500">Publish as a Python package</div>
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">Deploy</Button>
                              </div>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Server className="h-5 w-5 text-gray-500" />
                                  <div>
                                    <div className="font-medium">FastAPI Service</div>
                                    <div className="text-xs text-gray-500">Deploy as API service</div>
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">Deploy</Button>
                              </div>
                            </>
                          )}
                          
                          {deploymentType === "api" && (
                            <>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-2">
                                  <Globe className="h-5 w-5 text-gray-500" />
                                  <div>
                                    <div className="font-medium">InstructAI Cloud</div>
                                    <div className="text-xs text-gray-500">Deploy to our managed platform</div>
                                  </div>
                                </div>
                                <Button 
                                  size="sm" 
                                  variant="default"
                                  onClick={deployPrompt}
                                  disabled={isGenerating}
                                >
                                  Deploy Now
                                </Button>
                              </div>
                              
                              {apiMode === "vercel" && (
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center gap-2">
                                    <ExternalLink className="h-5 w-5 text-gray-500" />
                                    <div>
                                      <div className="font-medium">Deploy to Vercel</div>
                                      <div className="text-xs text-gray-500">Connect to your Vercel account</div>
                                    </div>
                                  </div>
                                  <Button size="sm" variant="outline">Connect</Button>
                                </div>
                              )}
                            </>
                          )}
                        </div>
                      </div>
                      
                      {deployedUrl && (
                        <div className="bg-green-50 border border-green-200 p-4 rounded-md">
                          <h3 className="font-medium text-green-800 mb-2">Successfully Deployed!</h3>
                          <div className="flex items-center gap-2">
                            <Input 
                              value={deployedUrl} 
                              readOnly
                              className="bg-white"
                            />
                            <Button 
                              variant="outline" 
                              size="sm"
                              className="shrink-0"
                              onClick={() => copyToClipboard(deployedUrl)}
                            >
                              <Clipboard className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="text-xs text-green-700 mt-2">
                            Your API is now live! You can start sending requests to this endpoint.
                          </div>
                          <div className="mt-3">
                            <Button 
                              variant="link" 
                              className="h-auto p-0 text-sm text-green-800"
                              onClick={() => window.open(deployedUrl, '_blank')}
                            >
                              View Documentation <ExternalLink className="h-3 w-3 ml-1" />
                            </Button>
                          </div>
                        </div>
                      )}
                    </>
                  ) : (
                    <div className="bg-muted p-8 text-center rounded-md">
                      <DownloadCloud className="h-10 w-10 mx-auto text-gray-400 mb-2" />
                      <h3 className="font-medium">No Code Generated Yet</h3>
                      <p className="text-gray-500 text-sm mt-1 max-w-xs mx-auto">
                        Generate your code first before deploying
                      </p>
                    </div>
                  )}
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default PromptDeployment;
