
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useGemini } from "@/hooks/use-gemini";
import { useToast } from "@/hooks/use-toast";
import { Code, Play, Save, FileCode, Settings, FileJson, Download } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const IDEPromptEditor = () => {
  const [promptCode, setPromptCode] = useState(
    `# System Instruction
You are a helpful assistant that provides concise, accurate information.

# User Prompt
{{input}}

# Format
Respond with clear, structured information using markdown formatting.`
  );
  
  const [testInput, setTestInput] = useState("Explain the concept of prompt engineering");
  const [response, setResponse] = useState("");
  const [promptName, setPromptName] = useState("New Prompt");
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState("editor");
  const [theme, setTheme] = useState("light");
  const [fontSize, setFontSize] = useState("14");
  
  const { generateInstruction } = useGemini();
  const { toast } = useToast();

  const runPrompt = async () => {
    if (!promptCode.trim()) {
      toast({
        title: "Empty Prompt",
        description: "Please write a prompt before testing",
        variant: "destructive"
      });
      return;
    }
    
    setIsProcessing(true);
    try {
      const processedPrompt = promptCode.replace("{{input}}", testInput);
      
      const result = await generateInstruction({
        prompt: processedPrompt,
        temperature: 0.7
      });
      
      if (result?.generatedText) {
        setResponse(result.generatedText);
        setActiveTab("output");
      } else {
        throw new Error("Failed to generate response");
      }
    } catch (error) {
      console.error("Error running prompt:", error);
      toast({
        title: "Processing Failed",
        description: "Could not run the prompt",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  const savePrompt = () => {
    const savedPrompts = JSON.parse(localStorage.getItem("savedPrompts") || "[]");
    const timestamp = new Date().toISOString();
    
    const newPrompt = {
      id: `prompt-${timestamp}`,
      name: promptName,
      code: promptCode,
      createdAt: timestamp
    };
    
    savedPrompts.push(newPrompt);
    localStorage.setItem("savedPrompts", JSON.stringify(savedPrompts));
    
    toast({
      title: "Prompt Saved",
      description: `"${promptName}" has been saved successfully`
    });
  };
  
  const exportPromptAsJS = () => {
    const jsCode = `// ${promptName}
// Generated by InstructAI
// ${new Date().toLocaleString()}

/**
 * A prompt function that can be used in applications
 * @param {string} input - The user input to process
 * @returns {string} - The formatted prompt ready to send to an LLM
 */
export function generatePrompt(input) {
  const template = \`${promptCode.replace(/`/g, '\\`')}\`;
  return template.replace("{{input}}", input);
}
`;

    const blob = new Blob([jsCode], { type: "text/javascript" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${promptName.toLowerCase().replace(/\s+/g, '-')}.js`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Prompt Exported",
      description: "JavaScript file downloaded successfully"
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between gap-4 mb-4">
        <div className="flex-1">
          <Input
            value={promptName}
            onChange={(e) => setPromptName(e.target.value)}
            placeholder="Untitled Prompt"
            className="text-lg font-medium"
          />
        </div>
        <div className="flex flex-wrap gap-2">
          <Button 
            variant="secondary" 
            size="sm" 
            onClick={savePrompt}
            className="flex items-center gap-1"
          >
            <Save className="h-4 w-4" />
            Save
          </Button>
          <Button 
            variant="secondary" 
            size="sm" 
            onClick={exportPromptAsJS}
            className="flex items-center gap-1"
          >
            <FileCode className="h-4 w-4" />
            Export
          </Button>
          <Button 
            variant="default" 
            size="sm" 
            onClick={runPrompt}
            disabled={isProcessing}
            className="flex items-center gap-1"
          >
            <Play className="h-4 w-4" />
            Run
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div className="space-y-4">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <div className="flex justify-between items-center">
              <TabsList>
                <TabsTrigger value="editor" className="flex items-center gap-1">
                  <Code className="h-4 w-4" />
                  Editor
                </TabsTrigger>
                <TabsTrigger value="settings" className="flex items-center gap-1">
                  <Settings className="h-4 w-4" />
                  Settings
                </TabsTrigger>
              </TabsList>
              <div className="flex items-center gap-2">
                <Select value={theme} onValueChange={setTheme}>
                  <SelectTrigger className="w-[100px] h-8 text-xs">
                    <SelectValue placeholder="Theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="light">Light</SelectItem>
                    <SelectItem value="dark">Dark</SelectItem>
                    <SelectItem value="github">GitHub</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={fontSize} onValueChange={setFontSize}>
                  <SelectTrigger className="w-[70px] h-8 text-xs">
                    <SelectValue placeholder="Size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="12">12px</SelectItem>
                    <SelectItem value="14">14px</SelectItem>
                    <SelectItem value="16">16px</SelectItem>
                    <SelectItem value="18">18px</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <TabsContent value="editor" className="mt-2">
              <Card className="border border-gray-200">
                <CardContent className="p-0">
                  <Textarea
                    value={promptCode}
                    onChange={(e) => setPromptCode(e.target.value)}
                    className="font-mono h-[400px] resize-none border-0 focus-visible:ring-0"
                    placeholder="Write your prompt here..."
                    style={{ fontSize: `${fontSize}px` }}
                  />
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="settings" className="mt-2">
              <Card>
                <CardContent className="p-4">
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-medium mb-2">Variables</h3>
                      <p className="text-sm text-gray-500 mb-2">
                        Use {{variable}} syntax to insert dynamic content
                      </p>
                      <div className="bg-muted p-2 rounded text-sm">
                        <code>{{input}}</code> - User input
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="font-medium mb-2">Keyboard Shortcuts</h3>
                      <ul className="text-sm space-y-1">
                        <li><kbd className="px-1 bg-gray-100 rounded">Ctrl+S</kbd> - Save prompt</li>
                        <li><kbd className="px-1 bg-gray-100 rounded">Ctrl+Enter</kbd> - Run prompt</li>
                        <li><kbd className="px-1 bg-gray-100 rounded">Ctrl+/</kbd> - Comment selection</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Test Input</h3>
            <Textarea
              value={testInput}
              onChange={(e) => setTestInput(e.target.value)}
              placeholder="Enter test input here..."
              className="h-24 resize-none"
            />
          </div>
        </div>
        
        <div className="space-y-4">
          <Tabs defaultValue="output">
            <div className="flex justify-between items-center">
              <TabsList>
                <TabsTrigger value="output">Output</TabsTrigger>
                <TabsTrigger value="json">JSON</TabsTrigger>
              </TabsList>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  navigator.clipboard.writeText(response);
                  toast({ title: "Copied to clipboard" });
                }}
                className="h-8 text-xs"
              >
                <Download className="h-3 w-3 mr-1" />
                Export
              </Button>
            </div>
            
            <TabsContent value="output" className="mt-2">
              <Card className="border border-gray-200">
                <CardContent className="p-0">
                  <ScrollArea className="h-[490px] w-full rounded-md">
                    <div className="p-4 prose prose-sm max-w-none">
                      {response ? (
                        <div dangerouslySetInnerHTML={{ __html: response }} />
                      ) : (
                        <div className="text-gray-400 text-center py-10">
                          Run your prompt to see the output here
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="json" className="mt-2">
              <Card className="border border-gray-200">
                <CardContent className="p-0">
                  <ScrollArea className="h-[490px] w-full rounded-md">
                    <pre className="p-4 text-xs font-mono">
                      {response ? JSON.stringify({
                        prompt: promptCode.replace("{{input}}", testInput),
                        response: response,
                        metadata: {
                          timestamp: new Date().toISOString(),
                          name: promptName
                        }
                      }, null, 2) : "No data available"}
                    </pre>
                  </ScrollArea>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default IDEPromptEditor;
